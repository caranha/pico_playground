pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- basic


function _init()
	updatefun = {game = update_gameloop,
														menu = update_menuloop}
	drawfun = {game = draw_gameloop,
												menu = draw_menuloop}

	init_gameloop()
	init_menuloop()
	game_state = "menu"
end

function _update()
	updatefun[game_state]()
end

function _draw()
	drawfun[game_state]()
	draw_log()
end

log = {}
function draw_log()
	local count = 8
	--print(stat(1),100,128-count,10)
	for i in all(log) do
		count += 8
		print(i,100,128-count,10)
	end
end
-->8
-- simulation

function init_gameloop()
	init_board()
	user_init()
	start_simulation()
end

function update_gameloop()
	update_interface()
end

function draw_gameloop()
	cls(0)
	draw_board(boardpos[1],boardpos[2])
	draw_interface()
	continue_simulation()
end

function init_board()
	boardpos = {40,40}
	board = {}
	bpop = 0
	bsize = 75
	bocolor = {7,6}
	bcolor = {4,9,10,7}
	randomize_board(500)
	
	initial_deadcells()
end

function initial_deadcells()
	local x = flr(bsize / 2)
	local y = flr(bsize / 5)
	for i = 0, flr(bsize/2) do
		board[x+(y+i)*bsize] = -1
		board[x+1+(y+i)*bsize] = -1
	end
end


function randomize_board(count)
	board = {}
	for i = 1,count do
		board[flr(rnd()*bsize) + flr(rnd()*bsize)*bsize] = bcolor[1]
	end
end

function add_random(x,y,r,count)
	for i = 1,count do
		local xo = flr(x + rnd()*r)
		local yo = flr(y + rnd()*r)
		local idx = xo + yo*bsize
		board[idx] = bcolor[1]
	end
	start_simulation()
end

function add_stamp(x,y,st)
	sx = (st%16)*8
	sy = (flr(st/16))*8
	for i = 0,16 do
		for j = 0,16 do
			local idx = x+i + (y+j)*bsize
			if (sget(sx+i,sy+j) != 0) board[idx] = bcolor[1]
		end
	end
	start_simulation()
end


function start_simulation()
	bup = cocreate(simulate)
end

function continue_simulation()
	if (bup == nil) return
	if (costatus(bup) == "dead") bup = cocreate(simulate)
	assert(coresume(bup))
end


function simulate()
	local new_board = {}
	for k=0,bsize*bsize do
		if board[k] != -1 then
			local sum = 0
			local mage = 0
			for xi=0,2 do
			 for yi=0,2 do
		 		i = board[k+(xi-1)+(yi-1)*bsize]
		 		if xi*yi != 1 and i != nil and i > -1 then
		 	 	sum += 1
		 	 	mage = max(mage,board[k+(xi-1)+(yi-1)*bsize])
		 		end
		 	end
			end
			if board[k] != nil then
				if (sum > 1 and sum < 4) new_board[k] = max(1,board[k]-1)
			else
				if (sum == 3) new_board[k] = mage+1
			end
		else
			new_board[k] = -1
		end
	end
	board = new_board
end

function draw_board(x,y)
	draw_edge(x,y)
	local clife = 0
	for k,i in pairs(board) do
		local c = (i == -1 and 5 or bcolor[min(flr(i/4)+1,#bcolor)])
		pset(x+k%bsize,y+flr(k/bsize),c)
		clife += 1
	end
	bpop = clife
	--draw_bar(x,y+bsize+2,clife)
end

function draw_edge(x,y)
	rectfill(x-1,y-1,x+bsize,y+bsize,bocolor[1])
	rectfill(x,y,x-1+bsize,y-1+bsize,bocolor[2])
end

--function draw_bar(x,y,fill)
--	rectfill(x-1,y,x+(fill/(bsize*sqrt(bsize)))*bsize,y+5,8)
--	rect(x-1,y,x+bsize,y+5,bocolor[1])
--end

function board_harvest(b,str)
	local ret = {}
	for k,i in pairs(b) do
		if i > -1 and rnd() < str then
			b[k] = nil
			add(ret,{x=k%bsize+boardpos[1], y=flr(k/bsize)+boardpos[2],s=i})
		end
	end
	start_simulation()
	return ret
end


-->8
-- user interface

function user_init()
	life_stored = 0
	action_state = 0
	
	suck_power = 0
	suck_pos = {boardpos[1],boardpos[2]-12}
	suck_pt = {}

	adder_pos = {0,0}
	menutiles = {3,5,7,9,11,13,35}
	menudrawpos = {0, 0}
	menuwidth = 6
	menu_pos = 0
end

function update_interface()
	if (btnp(‚ùé)) action_state = (action_state+1)%3
	update_sucker()
	update_action()
end


function draw_interface()
	draw_sucker(suck_pos[1],suck_pos[2])
	draw_adder(adder_pos[1],adder_pos[2])
	draw_menu(menudrawpos[1],menudrawpos[2])
	draw_score(boardpos[1]+bsize/3,boardpos[2]+bsize+3)
end

function draw_score(x,y)
	print("‚ô•",x,y,8)
	print(flr(life_stored),x+8,y,8)
end

function draw_sucker(x,y)
	-- draw sucklings
	for i in all(suck_pt) do
		pset(i.x,i.y,12)
	end

	if (suck_power > 0) then
		x += rnd()*2
		y += rnd()*2
	end

	-- draw sucker
	local cc = (action_state == 2 and 8 or 12)
	rectfill(x+16,y,x+bsize-17,y+8,cc)
	rectfill(x+6,y+2,x+bsize-7,y+8,cc)
	rectfill(x,y+4,x+bsize-1,y+8,cc)	
end

function start_sucking()
	suck_pt = board_harvest(board,suck_power)
end

function update_sucker()
	
	if #suck_pt == 0 then
		if action_state == 2 and btn(üÖæÔ∏è) then 
			suck_power = (suck_power+0.05) % 1
		else
			if (suck_power > 0) start_sucking()
			if (#suck_pt == 0) suck_power = 0
		end
	else
		for i in all(suck_pt) do
			i.y -= 1+rnd()
			if i.y < boardpos[2]-4 then 
				life_stored += i.s/100
				del(suck_pt,i)
			end
		end
		if (#suck_pt == 0) suck_power = 0
	end
end

function draw_adder(x,y)
	if (action_state == 1) spr(menutiles[menu_pos+1],x+boardpos[1],y+boardpos[2],2,2)
	
	if (action_state == 1) pal(12,8)
	spr(1, x+boardpos[1], y+boardpos[2],2,2)
	pal(12,12)
end

function update_action()
	if action_state == 0 then
		update_menu()
	elseif action_state == 1 then
		update_adder()
	end
end

function update_adder()
	if (btn(‚¨ÜÔ∏è)) adder_pos[2] = mid(0,adder_pos[2]-1,bsize-16)
	if (btn(‚¨áÔ∏è)) adder_pos[2] = mid(0,adder_pos[2]+1,bsize-16)
	if (btn(‚¨ÖÔ∏è)) adder_pos[1] = mid(0,adder_pos[1]-1,bsize-16)
	if (btn(‚û°Ô∏è)) adder_pos[1] = mid(0,adder_pos[1]+1,bsize-16)


	if btnp(üÖæÔ∏è) and life_stored > 10 then
	 --add_random(adder_pos[1],adder_pos[2],16,40)
	 add_stamp(adder_pos[1],adder_pos[2],menutiles[menu_pos+1])
	 life_stored -= 10
	end
end

function draw_menu(x,y)
	for i = 1,#menutiles do
		spr(menutiles[i],x+((i-1)%menuwidth)*18,y+flr((i-1)/menuwidth)*18,2,2)
	end
	
	if (action_state == 0) pal(12,8)
	spr(1,x+(menu_pos%menuwidth)*18,y+flr(menu_pos/menuwidth)*18,2,2)
	pal(12,12)
end

function update_menu()
	if (btnp(‚¨ÖÔ∏è)) menu_pos = (menu_pos-1)%(#menutiles-1)
	if (btnp(‚û°Ô∏è)) menu_pos = (menu_pos+1)%(#menutiles-1)
	if (btnp(‚¨ÜÔ∏è)) menu_pos = (menu_pos-menuwidth)%(#menutiles-1)
	if (btnp(‚¨áÔ∏è)) menu_pos = (menu_pos+menuwidth)%(#menutiles-1)
end
-->8
-- todo

-- add dead cells

-----------------------

-- multiple boards
-- target score for each board
-- later board with higher scores
-- later boards with fixed dead zones
-- iteration limit?
-->8
-- main menu

function init_menuloop()
	menu_t = 0
end

function update_menuloop()
	menu_t += 1
	if (menu_t == 10) music(20)
	
	if btnp(‚ùé) and (menu_t > 10) then
		menu_lt = menu_t + 30
	end
	
	if menu_lt != nil then
		if menu_t > menu_lt then
			game_state = "game"
			music(0,200)
		end
	end
end

function draw_menuloop()
	cls()
	if (menu_lt != nil) color(rnd()*16)
	print("i am menu", 40,40)
	print("press ‚ùé to start", 40,50)
end
__gfx__
00000000cccc00000000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccc00000000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000004444444400000000000000
00700700cc000000000000cc00000000000000000000000000000000000444400000000000000000000000000000000000000000004000000040000000000000
00077000cc000000000000cc00040000000000000000000000000000000400000044000000000400040000000000000040000000000000000044000000000000
00077000000000000000000000040400000000000000000000000000000400000440000000000400040000000000004444000000000000000004000000000000
00700700000000000000000000044000000000000000044440000000000000400000000000000400040000000000004004400000000440000004000000000000
00000000000000000000000000000000000000000000444444000000000000404444400000000400040000000000440000440000004044000004000000000000
00000000000000000000000000000000000000000004404444000000000000400000400000000000000000000004400000040000004004440044000000000000
00000000000000000000000000000000000000000000440000000000000000444400400000000000000000000004000000444000004000044400000000000000
00000000000000000000000000000000440000000000000000000000000000000004000000000000000000000004440004400000004000000000000000000000
00000000000000000000000000000004040000000000000000000000000004000004000000044000000040000000044040000000004000000000000000000000
00000000000000000000000000000000040000000000000000000000000004000000000000004400000440000000004440000000004444444400000000000000
00000000cc000000000000cc00000000000000000000000000000000000004000000000000000444044400000000000000000000000000000440000000000000
00000000cc000000000000cc00000000000000000000000000000000000004440000000000000004440000000000000000000000000000000040000000000000
00000000cccc00000000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccc00000000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010400003c67300000000053c62500000000003c61500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010700003b5542f553356143961334215000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010400000c07300000000000c04300000000000c01300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000000095100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800003e7553e7253e7150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010700003067500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010500001807300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0110000021730237001f7202172121722217222172221723237000000000000237000000021730000000000020730000001f72020721207222072220722207232270000000000002270000000207300000000000
011000200ca700ca2024c00248000c8200c81024c0024c000ca700ca2024c00000000c8200c81024c1324c000ca700ca2024c00000000c8200c81024c0024c000ca700ca2024c00000000c8200c81024c0024c23
011000002a0112a010000000e403280200000029c0327000270122701227012270122701327000270002800027000270001c01028c0329c031b0101b0102fc03230102bc032101028c032101028c032001000000
011000002301123010000000000023020000000000000000220122201222012220122201300000000000000000000000002101000000000002001020010000001e010000001c010000001c010000001b01000000
011000001c7101f7002170023710217001f7001c7101f7202171023720217101f7201c7101f72021710237201b7101e7001f7101b7001e7101f7201b7001e7201f7101b7201e7101f7201b7101e7201f7101b720
011000002373023700217002372123722237222372223723237000000000000237000000023730000000000022730000002172022721227222272222722227232270000000000002270000000227300000000000
011000002373023700217002372123722237222372223723237000000000000237000000023730000000000022730000002172022721227222272222722227232270000000000002270000000227300000000000
0110002003075060000a7000607509700000000a0710a0710a0710a07103070030700200009700020700207003075060000a7000607209700000000a0710a0710a0710a071020100e0350f025097000207002070
0108002018e1500000000000000000000000001cd350000018e25000001fd1300000000000000018e000000018e1500000000000000000000000001cd150000018e350000018d2518d000cd150000018e0000000
011000200ca000ca0024c00248000c8100c81024c0024c000ca000ca0024c00000000c8100c81024c1324c000ca000ca0024c00000000c8100c81024c0024c000ca000ca0024c00000000c8100c81024c0024c13
011000000372003720037200372003720037200372003720037200372003720037200372003720037200372003720037200372003720037200372003720037200372003720037200372003720037200372003720
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011400201b7500000000000197550000000000187500000000000177501775017752000001775017750177531b7500000000000197500000000000187500000000000177501775017752000001d7501d7501d753
011400001e75000000000001c75500000000001b75000000000001f7501f7501f752000001f7501f7501f7531e75000000000001c75500000000001b75000000000001d7501e7502b75200000297502975029753
0114000018e501881018d1018e501881018d1018e501881018d2018e101882018d1018e501881018d1018d2018e20000000000018e2018d200000024a0024a3018a50000000000018e2018d20000000000000000
011400001d750000001d720000001d710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011400002975000000297200000029710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
01 080e4344
00 080e4344
00 08090a44
00 08090a44
00 0e0f5044
00 0e0f4344
00 0f0e0944
00 0f0e0944
00 080b0c44
00 080b0744
00 100e0c44
02 100e0744
00 484b4c44
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
01 14151644
00 17184344

